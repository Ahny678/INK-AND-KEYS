// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // New: Books relationship (replaces documents)
  books     Book[]
  // Keep existing for migration
  documents Document[]
  files     UploadedFile[]

  @@map("users")
}

// NEW: Book model for organizing content
model Book {
  id          String   @id @default(cuid())
  title       String
  description String?  // Optional book description
  userId      String   // Who owns this book
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  chapters Chapter[] // A book has many chapters

  @@map("books")
}

// NEW: Chapter model for individual chapters within books
model Chapter {
  id        String   @id @default(cuid())
  title     String
  content   String   @default("")
  order     Int      // Chapter order within the book
  bookId    String   // Which book this chapter belongs to
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  book Book @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@map("chapters")
}

// EXISTING: Document model (keeping for migration purposes)
model Document {
  id               String      @id @default(cuid())
  title            String
  content          String      @default("")
  userId           String
  documentType     DocumentType @default(CREATED)
  originalFileName String?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("documents")
}

model UploadedFile {
  id           String     @id @default(cuid())
  originalName String
  fileName     String
  filePath     String
  mimeType     String
  size         Int
  userId       String
  status       FileStatus @default(UPLOADED)
  createdAt    DateTime   @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("uploaded_files")
}

enum DocumentType {
  CREATED
  OCR_PROCESSED
}

enum FileStatus {
  UPLOADED
  PROCESSING
  PROCESSED
  FAILED
}